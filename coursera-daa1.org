* Week 1
** Merge sort

#+begin_src C
  #include <stdlib.h>
  #include <stdio.h>

  void print_array(int* array, int size);
  int* merge_sort(int* array, int size);

  int main ()
  {
      int array[] = { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 };

      int size = sizeof(array) / sizeof(int);

      print_array(merge_sort(array, size), size);

      return 0;
  }

  void print_array(int* array, int size)
  {
      int i;

      for (i = 0; i < size; i++) {
	  if (i < size - 1) {
	      printf("%d, ", array[i]);
	  }
	  else {
	      printf("%d", array[i]);
	  }
      }
  }

  int* merge_sort(int* array, int size)
  {
      if (size < 2) return array;

      // split & recurse
      int center = size / 2;
      int *left  = merge_sort(array, center);
      int *right = merge_sort(array + center, size - center);

      // merge
      int* merge = malloc(size * sizeof(int));
      int k = 0, i = 0, j = 0;

      for (k = 0; k < size; k++) {
	  if (j >= size - center) {
	      merge[k] = left[i++];
	  }
	  else if (left[i] < right[j]) {
	      merge[k] = left[i++];
	  }
	  else if (i >= center) {
	      merge[k] = right[j++];
	  }
	  else if (right[j] < left[i]) {
	      merge[k] = right[j++];
	  }
      }

      return merge;
  }
#+end_src

#+results:
: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10


#+begin_src js
  function merge_sort(array) {

      var size = array.length;

      if (size < 2) {
	  return array;
      }

      // split & recurse
      var center = parseInt(size / 2, 10); // parseInt radix gotcha...
      var left   = merge_sort(array.slice(0, center));
      var right  = merge_sort(array.slice(center, size));

      // merge
      var merge = new Array(size);

      for (var k = 0, i = 0, j = 0; k < size; k++) {
	  if (j == size - center || left[i] < right[j]) {
	      merge[k] = left[i++];
	  }
	  else if (i == center || right[j] < left[i]) {
	      merge[k] = right[j++];
	  }
      }

      return merge;
  };

  console.log(merge_sort([ 9, 7, 8, 0, 1, 11, 4]));
#+end_src

#+results:
| 0 | 1 | 4 | 7 | 8 | 9 | 11 |


** Inversions
#+begin_src C
  #include <stdio.h>
  #include <stdlib.h>

  int count_inversions(int* array, int size)
  {
      if (size < 2) return 0;

      int center = size / 2;
      int left_count  = count_inversions(array, center);
      int right_count = count_inversions(array + center, size - center);
      int split_count = 0;

      int k = 0, i = 0, j = center;
      for (k = 0; k < size; k++) {
	  if (j == size || array[i] < array[j]) {
	      i++;
	  }
	  else if (i == center || array[j] < array[i]) {
	      j++;
	      if (i != center) split_count += center - i;
	  }
      }

      return left_count + right_count + split_count;
  }

  int main ()
  {
      int test[] = {9, 8, 7, 8, 5};
      printf("%d", count_inversions(test, 5));
      return 0;
  }

#+end_src

#+results:
: 8

#+begin_src js

  function countInversions(array) {

      var size = array.length;

      if (size < 2) {
	  return 0;
      }

      // split & recurse
      var center = parseInt(size / 2, 10); // parseInt radix gotcha...
      var left   = array.slice(0, center);
      var right  = array.slice(center, size);

      var leftCount  = countInversions(left);
      var rightCount = countInversions(right);

      // Count split inversion
      var splitCount = 0;

      for (var k = 0, i = 0, j = 0; k < size; k++) {
	  if (j == right.length || left[i] < right[j]) {
	      i++;
	  }
	  else if (i == left.length || right[j] < left[i]) {
	      j++;
	      if (i != left.lentgh) splitCount += left.length - i;
	  }
      }

      return leftCount + rightCount + splitCount;
  };

  console.log(countInversions([9, 8, 7, 8, 5]));
#+end_src

#+results:
: 8
